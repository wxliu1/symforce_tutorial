// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: projection_residual
 *
 * Args:
 *     pts_i: Matrix31
 *     pts_j: Matrix31
 *     Pi: Matrix31
 *     Qi: Rot3
 *     Pj: Matrix31
 *     Qj: Rot3
 *     tic: Matrix31
 *     qic: Rot3
 *     inv_dep_i: Scalar
 *
 * Outputs:
 *     res: Matrix21
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> ProjectionResidual(
    const Eigen::Matrix<Scalar, 3, 1>& pts_i, const Eigen::Matrix<Scalar, 3, 1>& pts_j,
    const Eigen::Matrix<Scalar, 3, 1>& Pi, const sym::Rot3<Scalar>& Qi,
    const Eigen::Matrix<Scalar, 3, 1>& Pj, const sym::Rot3<Scalar>& Qj,
    const Eigen::Matrix<Scalar, 3, 1>& tic, const sym::Rot3<Scalar>& qic, const Scalar inv_dep_i) {
  // Total ops: 169

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _Qi = Qi.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Qj = Qj.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _qic = qic.Data();

  // Intermediate terms (56)
  const Scalar _tmp0 = 2 * _qic[1];
  const Scalar _tmp1 = _qic[3] * _tmp0;
  const Scalar _tmp2 = 2 * _qic[0] * _qic[2];
  const Scalar _tmp3 = -_tmp1 + _tmp2;
  const Scalar _tmp4 = -2 * std::pow(_Qj[0], Scalar(2));
  const Scalar _tmp5 = 1 - 2 * std::pow(_Qj[1], Scalar(2));
  const Scalar _tmp6 = 2 * _Qi[3];
  const Scalar _tmp7 = _Qi[1] * _tmp6;
  const Scalar _tmp8 = 2 * _Qi[0] * _Qi[2];
  const Scalar _tmp9 = -2 * std::pow(_qic[1], Scalar(2));
  const Scalar _tmp10 = -2 * std::pow(_qic[2], Scalar(2));
  const Scalar _tmp11 = _tmp10 + _tmp9 + 1;
  const Scalar _tmp12 = Scalar(1.0) / (inv_dep_i);
  const Scalar _tmp13 = _tmp12 * pts_i(0, 0);
  const Scalar _tmp14 = _tmp1 + _tmp2;
  const Scalar _tmp15 = _tmp12 * pts_i(2, 0);
  const Scalar _tmp16 = 2 * _qic[3];
  const Scalar _tmp17 = _qic[2] * _tmp16;
  const Scalar _tmp18 = _qic[0] * _tmp0;
  const Scalar _tmp19 = -_tmp17 + _tmp18;
  const Scalar _tmp20 = _tmp12 * pts_i(1, 0);
  const Scalar _tmp21 = _tmp11 * _tmp13 + _tmp14 * _tmp15 + _tmp19 * _tmp20 + tic(0, 0);
  const Scalar _tmp22 = 2 * _Qi[1];
  const Scalar _tmp23 = _Qi[2] * _tmp22;
  const Scalar _tmp24 = _Qi[0] * _tmp6;
  const Scalar _tmp25 = 1 - 2 * std::pow(_qic[0], Scalar(2));
  const Scalar _tmp26 = _tmp10 + _tmp25;
  const Scalar _tmp27 = _qic[0] * _tmp16;
  const Scalar _tmp28 = _qic[2] * _tmp0;
  const Scalar _tmp29 = -_tmp27 + _tmp28;
  const Scalar _tmp30 = _tmp17 + _tmp18;
  const Scalar _tmp31 = _tmp13 * _tmp30 + _tmp15 * _tmp29 + _tmp20 * _tmp26 + tic(1, 0);
  const Scalar _tmp32 = -2 * std::pow(_Qi[1], Scalar(2));
  const Scalar _tmp33 = 1 - 2 * std::pow(_Qi[0], Scalar(2));
  const Scalar _tmp34 = _tmp25 + _tmp9;
  const Scalar _tmp35 = _tmp27 + _tmp28;
  const Scalar _tmp36 = _tmp13 * _tmp3 + _tmp15 * _tmp34 + _tmp20 * _tmp35 + tic(2, 0);
  const Scalar _tmp37 = Pi(2, 0) - Pj(2, 0) + _tmp21 * (-_tmp7 + _tmp8) +
                        _tmp31 * (_tmp23 + _tmp24) + _tmp36 * (_tmp32 + _tmp33);
  const Scalar _tmp38 = 2 * _Qj[2];
  const Scalar _tmp39 = _Qj[1] * _tmp38;
  const Scalar _tmp40 = 2 * _Qj[0];
  const Scalar _tmp41 = _Qj[3] * _tmp40;
  const Scalar _tmp42 = _Qi[0] * _tmp22;
  const Scalar _tmp43 = _Qi[2] * _tmp6;
  const Scalar _tmp44 = -2 * std::pow(_Qi[2], Scalar(2));
  const Scalar _tmp45 = Pi(1, 0) - Pj(1, 0) + _tmp21 * (_tmp42 + _tmp43) +
                        _tmp31 * (_tmp33 + _tmp44) + _tmp36 * (_tmp23 - _tmp24);
  const Scalar _tmp46 = 2 * _Qj[1] * _Qj[3];
  const Scalar _tmp47 = _Qj[2] * _tmp40;
  const Scalar _tmp48 = Pi(0, 0) - Pj(0, 0) + _tmp21 * (_tmp32 + _tmp44 + 1) +
                        _tmp31 * (_tmp42 - _tmp43) + _tmp36 * (_tmp7 + _tmp8);
  const Scalar _tmp49 = _tmp37 * (_tmp4 + _tmp5) + _tmp45 * (_tmp39 - _tmp41) +
                        _tmp48 * (_tmp46 + _tmp47) - tic(2, 0);
  const Scalar _tmp50 = _Qj[3] * _tmp38;
  const Scalar _tmp51 = _Qj[1] * _tmp40;
  const Scalar _tmp52 = -2 * std::pow(_Qj[2], Scalar(2));
  const Scalar _tmp53 = _tmp37 * (-_tmp46 + _tmp47) + _tmp45 * (_tmp50 + _tmp51) +
                        _tmp48 * (_tmp5 + _tmp52) - tic(0, 0);
  const Scalar _tmp54 = _tmp37 * (_tmp39 + _tmp41) + _tmp45 * (_tmp4 + _tmp52 + 1) +
                        _tmp48 * (-_tmp50 + _tmp51) - tic(1, 0);
  const Scalar _tmp55 = Scalar(1.0) / (_tmp14 * _tmp53 + _tmp29 * _tmp54 + _tmp34 * _tmp49);

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) =
      Scalar(306.66666666666703) * _tmp55 * (_tmp11 * _tmp53 + _tmp3 * _tmp49 + _tmp30 * _tmp54) -
      Scalar(306.66666666666703) * pts_j(0, 0);
  _res(1, 0) =
      Scalar(306.66666666666703) * _tmp55 * (_tmp19 * _tmp53 + _tmp26 * _tmp54 + _tmp35 * _tmp49) -
      Scalar(306.66666666666703) * pts_j(1, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
