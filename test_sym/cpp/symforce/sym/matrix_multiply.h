// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: matrix_multiply
 *
 * Args:
 *     a: Matrix55
 *     b: Matrix55
 *
 * Outputs:
 *     res: Matrix55
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 5, 5> MatrixMultiply(const Eigen::Matrix<Scalar, 5, 5>& a,
                                           const Eigen::Matrix<Scalar, 5, 5>& b) {
  // Total ops: 225

  // Input arrays

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 5, 5> _res;

  _res(0, 0) = a(0, 0) * b(0, 0) + a(0, 1) * b(1, 0) + a(0, 2) * b(2, 0) + a(0, 3) * b(3, 0) +
               a(0, 4) * b(4, 0);
  _res(1, 0) = a(1, 0) * b(0, 0) + a(1, 1) * b(1, 0) + a(1, 2) * b(2, 0) + a(1, 3) * b(3, 0) +
               a(1, 4) * b(4, 0);
  _res(2, 0) = a(2, 0) * b(0, 0) + a(2, 1) * b(1, 0) + a(2, 2) * b(2, 0) + a(2, 3) * b(3, 0) +
               a(2, 4) * b(4, 0);
  _res(3, 0) = a(3, 0) * b(0, 0) + a(3, 1) * b(1, 0) + a(3, 2) * b(2, 0) + a(3, 3) * b(3, 0) +
               a(3, 4) * b(4, 0);
  _res(4, 0) = a(4, 0) * b(0, 0) + a(4, 1) * b(1, 0) + a(4, 2) * b(2, 0) + a(4, 3) * b(3, 0) +
               a(4, 4) * b(4, 0);
  _res(0, 1) = a(0, 0) * b(0, 1) + a(0, 1) * b(1, 1) + a(0, 2) * b(2, 1) + a(0, 3) * b(3, 1) +
               a(0, 4) * b(4, 1);
  _res(1, 1) = a(1, 0) * b(0, 1) + a(1, 1) * b(1, 1) + a(1, 2) * b(2, 1) + a(1, 3) * b(3, 1) +
               a(1, 4) * b(4, 1);
  _res(2, 1) = a(2, 0) * b(0, 1) + a(2, 1) * b(1, 1) + a(2, 2) * b(2, 1) + a(2, 3) * b(3, 1) +
               a(2, 4) * b(4, 1);
  _res(3, 1) = a(3, 0) * b(0, 1) + a(3, 1) * b(1, 1) + a(3, 2) * b(2, 1) + a(3, 3) * b(3, 1) +
               a(3, 4) * b(4, 1);
  _res(4, 1) = a(4, 0) * b(0, 1) + a(4, 1) * b(1, 1) + a(4, 2) * b(2, 1) + a(4, 3) * b(3, 1) +
               a(4, 4) * b(4, 1);
  _res(0, 2) = a(0, 0) * b(0, 2) + a(0, 1) * b(1, 2) + a(0, 2) * b(2, 2) + a(0, 3) * b(3, 2) +
               a(0, 4) * b(4, 2);
  _res(1, 2) = a(1, 0) * b(0, 2) + a(1, 1) * b(1, 2) + a(1, 2) * b(2, 2) + a(1, 3) * b(3, 2) +
               a(1, 4) * b(4, 2);
  _res(2, 2) = a(2, 0) * b(0, 2) + a(2, 1) * b(1, 2) + a(2, 2) * b(2, 2) + a(2, 3) * b(3, 2) +
               a(2, 4) * b(4, 2);
  _res(3, 2) = a(3, 0) * b(0, 2) + a(3, 1) * b(1, 2) + a(3, 2) * b(2, 2) + a(3, 3) * b(3, 2) +
               a(3, 4) * b(4, 2);
  _res(4, 2) = a(4, 0) * b(0, 2) + a(4, 1) * b(1, 2) + a(4, 2) * b(2, 2) + a(4, 3) * b(3, 2) +
               a(4, 4) * b(4, 2);
  _res(0, 3) = a(0, 0) * b(0, 3) + a(0, 1) * b(1, 3) + a(0, 2) * b(2, 3) + a(0, 3) * b(3, 3) +
               a(0, 4) * b(4, 3);
  _res(1, 3) = a(1, 0) * b(0, 3) + a(1, 1) * b(1, 3) + a(1, 2) * b(2, 3) + a(1, 3) * b(3, 3) +
               a(1, 4) * b(4, 3);
  _res(2, 3) = a(2, 0) * b(0, 3) + a(2, 1) * b(1, 3) + a(2, 2) * b(2, 3) + a(2, 3) * b(3, 3) +
               a(2, 4) * b(4, 3);
  _res(3, 3) = a(3, 0) * b(0, 3) + a(3, 1) * b(1, 3) + a(3, 2) * b(2, 3) + a(3, 3) * b(3, 3) +
               a(3, 4) * b(4, 3);
  _res(4, 3) = a(4, 0) * b(0, 3) + a(4, 1) * b(1, 3) + a(4, 2) * b(2, 3) + a(4, 3) * b(3, 3) +
               a(4, 4) * b(4, 3);
  _res(0, 4) = a(0, 0) * b(0, 4) + a(0, 1) * b(1, 4) + a(0, 2) * b(2, 4) + a(0, 3) * b(3, 4) +
               a(0, 4) * b(4, 4);
  _res(1, 4) = a(1, 0) * b(0, 4) + a(1, 1) * b(1, 4) + a(1, 2) * b(2, 4) + a(1, 3) * b(3, 4) +
               a(1, 4) * b(4, 4);
  _res(2, 4) = a(2, 0) * b(0, 4) + a(2, 1) * b(1, 4) + a(2, 2) * b(2, 4) + a(2, 3) * b(3, 4) +
               a(2, 4) * b(4, 4);
  _res(3, 4) = a(3, 0) * b(0, 4) + a(3, 1) * b(1, 4) + a(3, 2) * b(2, 4) + a(3, 3) * b(3, 4) +
               a(3, 4) * b(4, 4);
  _res(4, 4) = a(4, 0) * b(0, 4) + a(4, 1) * b(1, 4) + a(4, 2) * b(2, 4) + a(4, 3) * b(3, 4) +
               a(4, 4) * b(4, 4);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
