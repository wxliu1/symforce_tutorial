// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: imu_residual
 *
 * Args:
 *     Pi: Matrix31
 *     Qi: Rot3
 *     Vi: Matrix31
 *     Bai: Matrix31
 *     Bgi: Matrix31
 *     Pj: Matrix31
 *     Qj: Rot3
 *     Vj: Matrix31
 *     Baj: Matrix31
 *     Bgj: Matrix31
 *     delta_p: Matrix31
 *     delta_q: Quaternion
 *     delta_v: Matrix31
 *     G: Matrix31
 *     sum_dt: Scalar
 *     dp_dba: Matrix33
 *     dp_dbg: Matrix33
 *     dq_dbg: Matrix33
 *     dv_dba: Matrix33
 *     dv_dbg: Matrix33
 *     linearized_ba: Matrix31
 *     linearized_bg: Matrix31
 *
 * Outputs:
 *     res: Matrix15_1
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 15, 1> ImuResidual(
    const Eigen::Matrix<Scalar, 3, 1>& Pi, const sym::Rot3<Scalar>& Qi,
    const Eigen::Matrix<Scalar, 3, 1>& Vi, const Eigen::Matrix<Scalar, 3, 1>& Bai,
    const Eigen::Matrix<Scalar, 3, 1>& Bgi, const Eigen::Matrix<Scalar, 3, 1>& Pj,
    const sym::Rot3<Scalar>& Qj, const Eigen::Matrix<Scalar, 3, 1>& Vj,
    const Eigen::Matrix<Scalar, 3, 1>& Baj, const Eigen::Matrix<Scalar, 3, 1>& Bgj,
    const Eigen::Matrix<Scalar, 3, 1>& delta_p, const sym::Quaternion<Scalar>& delta_q,
    const Eigen::Matrix<Scalar, 3, 1>& delta_v, const Eigen::Matrix<Scalar, 3, 1>& G,
    const Scalar sum_dt, const Eigen::Matrix<Scalar, 3, 3>& dp_dba,
    const Eigen::Matrix<Scalar, 3, 3>& dp_dbg, const Eigen::Matrix<Scalar, 3, 3>& dq_dbg,
    const Eigen::Matrix<Scalar, 3, 3>& dv_dba, const Eigen::Matrix<Scalar, 3, 3>& dv_dbg,
    const Eigen::Matrix<Scalar, 3, 1>& linearized_ba,
    const Eigen::Matrix<Scalar, 3, 1>& linearized_bg) {
  // Total ops: 284

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _Qi = Qi.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Qj = Qj.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _delta_q = delta_q.Data();

  // Intermediate terms (47)
  const Scalar _tmp0 = -2 * std::pow(_Qi[2], Scalar(2));
  const Scalar _tmp1 = -2 * std::pow(_Qi[1], Scalar(2));
  const Scalar _tmp2 = _tmp0 + _tmp1 + 1;
  const Scalar _tmp3 = Scalar(0.5) * std::pow(sum_dt, Scalar(2));
  const Scalar _tmp4 = G(0, 0) * _tmp3 - Pi(0, 0) + Pj(0, 0) - Vi(0, 0) * sum_dt;
  const Scalar _tmp5 = 2 * _Qi[1] * _Qi[3];
  const Scalar _tmp6 = 2 * _Qi[2];
  const Scalar _tmp7 = _Qi[0] * _tmp6;
  const Scalar _tmp8 = -_tmp5 + _tmp7;
  const Scalar _tmp9 = G(2, 0) * _tmp3 - Pi(2, 0) + Pj(2, 0) - Vi(2, 0) * sum_dt;
  const Scalar _tmp10 = 2 * _Qi[0];
  const Scalar _tmp11 = _Qi[1] * _tmp10;
  const Scalar _tmp12 = _Qi[3] * _tmp6;
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = G(1, 0) * _tmp3 - Pi(1, 0) + Pj(1, 0) - Vi(1, 0) * sum_dt;
  const Scalar _tmp15 = Bgi(0, 0) - linearized_bg(0, 0);
  const Scalar _tmp16 = Bgi(1, 0) - linearized_bg(1, 0);
  const Scalar _tmp17 = Bgi(2, 0) - linearized_bg(2, 0);
  const Scalar _tmp18 = Bai(1, 0) - linearized_ba(1, 0);
  const Scalar _tmp19 = Bai(0, 0) - linearized_ba(0, 0);
  const Scalar _tmp20 = Bai(2, 0) - linearized_ba(2, 0);
  const Scalar _tmp21 = 1 - 2 * std::pow(_Qi[0], Scalar(2));
  const Scalar _tmp22 = _tmp0 + _tmp21;
  const Scalar _tmp23 = _Qi[1] * _tmp6;
  const Scalar _tmp24 = _Qi[3] * _tmp10;
  const Scalar _tmp25 = _tmp23 + _tmp24;
  const Scalar _tmp26 = _tmp11 - _tmp12;
  const Scalar _tmp27 = _tmp5 + _tmp7;
  const Scalar _tmp28 = _tmp23 - _tmp24;
  const Scalar _tmp29 = _tmp1 + _tmp21;
  const Scalar _tmp30 = _Qi[0] * _Qj[2] - _Qi[1] * _Qj[3] - _Qi[2] * _Qj[0] + _Qi[3] * _Qj[1];
  const Scalar _tmp31 = Scalar(0.5) * _tmp15 * dq_dbg(0, 0) + Scalar(0.5) * _tmp16 * dq_dbg(0, 1) +
                        Scalar(0.5) * _tmp17 * dq_dbg(0, 2);
  const Scalar _tmp32 = _tmp15 * dq_dbg(1, 0) + _tmp16 * dq_dbg(1, 1) + _tmp17 * dq_dbg(1, 2);
  const Scalar _tmp33 = Scalar(0.5) * _delta_q[0];
  const Scalar _tmp34 = _tmp15 * dq_dbg(2, 0) + _tmp16 * dq_dbg(2, 1) + _tmp17 * dq_dbg(2, 2);
  const Scalar _tmp35 = Scalar(0.5) * _tmp34;
  const Scalar _tmp36 =
      -_delta_q[1] * _tmp31 + Scalar(1.0) * _delta_q[2] + _delta_q[3] * _tmp35 + _tmp32 * _tmp33;
  const Scalar _tmp37 = -_Qi[0] * _Qj[1] + _Qi[1] * _Qj[0] - _Qi[2] * _Qj[3] + _Qi[3] * _Qj[2];
  const Scalar _tmp38 = Scalar(0.5) * _tmp32;
  const Scalar _tmp39 =
      Scalar(1.0) * _delta_q[1] + _delta_q[2] * _tmp31 + _delta_q[3] * _tmp38 - _tmp33 * _tmp34;
  const Scalar _tmp40 = -_Qi[0] * _Qj[3] - _Qi[1] * _Qj[2] + _Qi[2] * _Qj[1] + _Qi[3] * _Qj[0];
  const Scalar _tmp41 = -_delta_q[0] * _tmp31 - _delta_q[1] * _tmp38 - _delta_q[2] * _tmp35 +
                        Scalar(1.0) * _delta_q[3];
  const Scalar _tmp42 = Scalar(1.0) * _delta_q[0] + _delta_q[1] * _tmp35 - _delta_q[2] * _tmp38 +
                        _delta_q[3] * _tmp31;
  const Scalar _tmp43 = _Qi[0] * _Qj[0] + _Qi[1] * _Qj[1] + _Qi[2] * _Qj[2] + _Qi[3] * _Qj[3];
  const Scalar _tmp44 = G(1, 0) * sum_dt - Vi(1, 0) + Vj(1, 0);
  const Scalar _tmp45 = G(2, 0) * sum_dt - Vi(2, 0) + Vj(2, 0);
  const Scalar _tmp46 = G(0, 0) * sum_dt - Vi(0, 0) + Vj(0, 0);

  // Output terms (1)
  Eigen::Matrix<Scalar, 15, 1> _res;

  _res(0, 0) = _tmp13 * _tmp14 - _tmp15 * dp_dbg(0, 0) - _tmp16 * dp_dbg(0, 1) -
               _tmp17 * dp_dbg(0, 2) - _tmp18 * dp_dba(0, 1) - _tmp19 * dp_dba(0, 0) +
               _tmp2 * _tmp4 - _tmp20 * dp_dba(0, 2) + _tmp8 * _tmp9 - delta_p(0, 0);
  _res(1, 0) = _tmp14 * _tmp22 - _tmp15 * dp_dbg(1, 0) - _tmp16 * dp_dbg(1, 1) -
               _tmp17 * dp_dbg(1, 2) - _tmp18 * dp_dba(1, 1) - _tmp19 * dp_dba(1, 0) -
               _tmp20 * dp_dba(1, 2) + _tmp25 * _tmp9 + _tmp26 * _tmp4 - delta_p(1, 0);
  _res(2, 0) = _tmp14 * _tmp28 - _tmp15 * dp_dbg(2, 0) - _tmp16 * dp_dbg(2, 1) -
               _tmp17 * dp_dbg(2, 2) - _tmp18 * dp_dba(2, 1) - _tmp19 * dp_dba(2, 0) -
               _tmp20 * dp_dba(2, 2) + _tmp27 * _tmp4 + _tmp29 * _tmp9 - delta_p(2, 0);
  _res(3, 0) =
      2 * _tmp30 * _tmp36 - 2 * _tmp37 * _tmp39 + 2 * _tmp40 * _tmp41 - 2 * _tmp42 * _tmp43;
  _res(4, 0) =
      2 * _tmp30 * _tmp41 - 2 * _tmp36 * _tmp40 + 2 * _tmp37 * _tmp42 - 2 * _tmp39 * _tmp43;
  _res(5, 0) =
      -2 * _tmp30 * _tmp42 - 2 * _tmp36 * _tmp43 + 2 * _tmp37 * _tmp41 + 2 * _tmp39 * _tmp40;
  _res(6, 0) = _tmp13 * _tmp44 - _tmp15 * dv_dbg(0, 0) - _tmp16 * dv_dbg(0, 1) -
               _tmp17 * dv_dbg(0, 2) - _tmp18 * dv_dba(0, 1) - _tmp19 * dv_dba(0, 0) +
               _tmp2 * _tmp46 - _tmp20 * dv_dba(0, 2) + _tmp45 * _tmp8 - delta_v(0, 0);
  _res(7, 0) = -_tmp15 * dv_dbg(1, 0) - _tmp16 * dv_dbg(1, 1) - _tmp17 * dv_dbg(1, 2) -
               _tmp18 * dv_dba(1, 1) - _tmp19 * dv_dba(1, 0) - _tmp20 * dv_dba(1, 2) +
               _tmp22 * _tmp44 + _tmp25 * _tmp45 + _tmp26 * _tmp46 - delta_v(1, 0);
  _res(8, 0) = -_tmp15 * dv_dbg(2, 0) - _tmp16 * dv_dbg(2, 1) - _tmp17 * dv_dbg(2, 2) -
               _tmp18 * dv_dba(2, 1) - _tmp19 * dv_dba(2, 0) - _tmp20 * dv_dba(2, 2) +
               _tmp27 * _tmp46 + _tmp28 * _tmp44 + _tmp29 * _tmp45 - delta_v(2, 0);
  _res(9, 0) = -Bai(0, 0) + Baj(0, 0);
  _res(10, 0) = -Bai(1, 0) + Baj(1, 0);
  _res(11, 0) = -Bai(2, 0) + Baj(2, 0);
  _res(12, 0) = -Bgi(0, 0) + Bgj(0, 0);
  _res(13, 0) = -Bgi(1, 0) + Bgj(1, 0);
  _res(14, 0) = -Bgi(2, 0) + Bgj(2, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
