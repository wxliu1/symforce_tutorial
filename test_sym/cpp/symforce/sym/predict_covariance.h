// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: predict_covariance
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *     accel: Matrix31
 *     accel_var: Matrix31
 *     gyro: Matrix31
 *     gyro_var: Scalar
 *     dt: Scalar
 *
 * Outputs:
 *     res: Matrix23_23
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 23, 23> PredictCovariance(const Eigen::Matrix<Scalar, 24, 1>& state,
                                                const Eigen::Matrix<Scalar, 23, 23>& P,
                                                const Eigen::Matrix<Scalar, 3, 1>& accel,
                                                const Eigen::Matrix<Scalar, 3, 1>& accel_var,
                                                const Eigen::Matrix<Scalar, 3, 1>& gyro,
                                                const Scalar gyro_var, const Scalar dt) {
  // Total ops: 1755

  // Unused inputs
  (void)gyro;

  // Input arrays

  // Intermediate terms (148)
  const Scalar _tmp0 = 2 * state(1, 0);
  const Scalar _tmp1 = _tmp0 * state(3, 0);
  const Scalar _tmp2 = -_tmp1 * dt;
  const Scalar _tmp3 = 2 * state(0, 0);
  const Scalar _tmp4 = _tmp3 * state(2, 0);
  const Scalar _tmp5 = _tmp4 * dt;
  const Scalar _tmp6 = _tmp2 - _tmp5;
  const Scalar _tmp7 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp8 = _tmp7 * dt;
  const Scalar _tmp9 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp10 = -_tmp9 * dt;
  const Scalar _tmp11 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp12 = _tmp11 * dt;
  const Scalar _tmp13 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp14 = _tmp13 * dt;
  const Scalar _tmp15 = _tmp10 + _tmp12 - _tmp14 + _tmp8;
  const Scalar _tmp16 = _tmp13 + _tmp7;
  const Scalar _tmp17 = _tmp11 + _tmp9;
  const Scalar _tmp18 = _tmp16 + _tmp17;
  const Scalar _tmp19 = _tmp0 * state(2, 0);
  const Scalar _tmp20 = -_tmp19 * dt;
  const Scalar _tmp21 = _tmp3 * state(3, 0);
  const Scalar _tmp22 = _tmp21 * dt;
  const Scalar _tmp23 = _tmp20 + _tmp22;
  const Scalar _tmp24 =
      P(0, 11) * _tmp18 + P(10, 11) * _tmp23 + P(11, 11) * _tmp6 + P(9, 11) * _tmp15;
  const Scalar _tmp25 =
      P(0, 10) * _tmp18 + P(10, 10) * _tmp23 + P(11, 10) * _tmp6 + P(9, 10) * _tmp15;
  const Scalar _tmp26 = P(0, 0) * _tmp18 + P(10, 0) * _tmp23 + P(11, 0) * _tmp6 + P(9, 0) * _tmp15;
  const Scalar _tmp27 = P(0, 9) * _tmp18 + P(10, 9) * _tmp23 + P(11, 9) * _tmp6 + P(9, 9) * _tmp15;
  const Scalar _tmp28 = std::pow(gyro_var, Scalar(2));
  const Scalar _tmp29 = _tmp10 + _tmp14;
  const Scalar _tmp30 = -_tmp12 + _tmp29 + _tmp8;
  const Scalar _tmp31 = _tmp0 * state(0, 0);
  const Scalar _tmp32 = _tmp31 * dt;
  const Scalar _tmp33 = 2 * state(2, 0) * state(3, 0);
  const Scalar _tmp34 = -_tmp33 * dt;
  const Scalar _tmp35 = _tmp32 + _tmp34;
  const Scalar _tmp36 = P(0, 1) * _tmp18 + P(10, 1) * _tmp23 + P(11, 1) * _tmp6 + P(9, 1) * _tmp15;
  const Scalar _tmp37 = _tmp20 - _tmp22;
  const Scalar _tmp38 = _tmp23 * _tmp28;
  const Scalar _tmp39 = _tmp28 * _tmp37;
  const Scalar _tmp40 = _tmp28 * _tmp6;
  const Scalar _tmp41 =
      P(1, 10) * _tmp18 + P(10, 10) * _tmp30 + P(11, 10) * _tmp35 + P(9, 10) * _tmp37;
  const Scalar _tmp42 =
      P(1, 11) * _tmp18 + P(10, 11) * _tmp30 + P(11, 11) * _tmp35 + P(9, 11) * _tmp37;
  const Scalar _tmp43 = P(1, 9) * _tmp18 + P(10, 9) * _tmp30 + P(11, 9) * _tmp35 + P(9, 9) * _tmp37;
  const Scalar _tmp44 = P(1, 1) * _tmp18 + P(10, 1) * _tmp30 + P(11, 1) * _tmp35 + P(9, 1) * _tmp37;
  const Scalar _tmp45 = _tmp12 + _tmp29 - _tmp8;
  const Scalar _tmp46 = -_tmp32 + _tmp34;
  const Scalar _tmp47 = P(0, 2) * _tmp18 + P(10, 2) * _tmp23 + P(11, 2) * _tmp6 + P(9, 2) * _tmp15;
  const Scalar _tmp48 = _tmp2 + _tmp5;
  const Scalar _tmp49 = P(1, 2) * _tmp18 + P(10, 2) * _tmp30 + P(11, 2) * _tmp35 + P(9, 2) * _tmp37;
  const Scalar _tmp50 =
      P(10, 10) * _tmp46 + P(11, 10) * _tmp45 + P(2, 10) * _tmp18 + P(9, 10) * _tmp48;
  const Scalar _tmp51 =
      P(10, 11) * _tmp46 + P(11, 11) * _tmp45 + P(2, 11) * _tmp18 + P(9, 11) * _tmp48;
  const Scalar _tmp52 = P(10, 2) * _tmp46 + P(11, 2) * _tmp45 + P(2, 2) * _tmp18 + P(9, 2) * _tmp48;
  const Scalar _tmp53 = P(10, 9) * _tmp46 + P(11, 9) * _tmp45 + P(2, 9) * _tmp18 + P(9, 9) * _tmp48;
  const Scalar _tmp54 =
      P(0, 12) * _tmp18 + P(10, 12) * _tmp23 + P(11, 12) * _tmp6 + P(9, 12) * _tmp15;
  const Scalar _tmp55 = -2 * _tmp7;
  const Scalar _tmp56 = -2 * _tmp11;
  const Scalar _tmp57 = _tmp55 + _tmp56 + 1;
  const Scalar _tmp58 = _tmp57 * dt;
  const Scalar _tmp59 =
      P(0, 13) * _tmp18 + P(10, 13) * _tmp23 + P(11, 13) * _tmp6 + P(9, 13) * _tmp15;
  const Scalar _tmp60 = -_tmp21;
  const Scalar _tmp61 = _tmp19 + _tmp60;
  const Scalar _tmp62 = _tmp61 * dt;
  const Scalar _tmp63 =
      P(0, 14) * _tmp18 + P(10, 14) * _tmp23 + P(11, 14) * _tmp6 + P(9, 14) * _tmp15;
  const Scalar _tmp64 = _tmp1 + _tmp4;
  const Scalar _tmp65 = _tmp64 * dt;
  const Scalar _tmp66 = -_tmp4;
  const Scalar _tmp67 = _tmp1 + _tmp66;
  const Scalar _tmp68 = accel(0, 0) - state(13, 0);
  const Scalar _tmp69 = -_tmp13;
  const Scalar _tmp70 = _tmp69 + _tmp7;
  const Scalar _tmp71 = -_tmp11;
  const Scalar _tmp72 = _tmp71 + _tmp9;
  const Scalar _tmp73 = accel(2, 0) - state(15, 0);
  const Scalar _tmp74 = _tmp31 + _tmp33;
  const Scalar _tmp75 = accel(1, 0) - state(14, 0);
  const Scalar _tmp76 = dt * (_tmp67 * _tmp68 + _tmp73 * (_tmp70 + _tmp72) + _tmp74 * _tmp75);
  const Scalar _tmp77 = -_tmp19;
  const Scalar _tmp78 = -_tmp9;
  const Scalar _tmp79 = -_tmp33;
  const Scalar _tmp80 = dt * (_tmp68 * (_tmp60 + _tmp77) + _tmp73 * (_tmp31 + _tmp79) +
                              _tmp75 * (_tmp16 + _tmp71 + _tmp78));
  const Scalar _tmp81 = P(0, 3) * _tmp18 + P(10, 3) * _tmp23 + P(11, 3) * _tmp6 + P(9, 3) * _tmp15;
  const Scalar _tmp82 =
      P(1, 12) * _tmp18 + P(10, 12) * _tmp30 + P(11, 12) * _tmp35 + P(9, 12) * _tmp37;
  const Scalar _tmp83 =
      P(1, 13) * _tmp18 + P(10, 13) * _tmp30 + P(11, 13) * _tmp35 + P(9, 13) * _tmp37;
  const Scalar _tmp84 =
      P(1, 14) * _tmp18 + P(10, 14) * _tmp30 + P(11, 14) * _tmp35 + P(9, 14) * _tmp37;
  const Scalar _tmp85 = P(1, 3) * _tmp18 + P(10, 3) * _tmp30 + P(11, 3) * _tmp35 + P(9, 3) * _tmp37;
  const Scalar _tmp86 =
      P(10, 12) * _tmp46 + P(11, 12) * _tmp45 + P(2, 12) * _tmp18 + P(9, 12) * _tmp48;
  const Scalar _tmp87 = P(10, 1) * _tmp46 + P(11, 1) * _tmp45 + P(2, 1) * _tmp18 + P(9, 1) * _tmp48;
  const Scalar _tmp88 =
      P(10, 13) * _tmp46 + P(11, 13) * _tmp45 + P(2, 13) * _tmp18 + P(9, 13) * _tmp48;
  const Scalar _tmp89 =
      P(10, 14) * _tmp46 + P(11, 14) * _tmp45 + P(2, 14) * _tmp18 + P(9, 14) * _tmp48;
  const Scalar _tmp90 = P(10, 3) * _tmp46 + P(11, 3) * _tmp45 + P(2, 3) * _tmp18 + P(9, 3) * _tmp48;
  const Scalar _tmp91 = P(1, 12) * _tmp76 - P(12, 12) * _tmp58 - P(13, 12) * _tmp62 -
                        P(14, 12) * _tmp65 + P(2, 12) * _tmp80 + P(3, 12);
  const Scalar _tmp92 = P(1, 1) * _tmp76 - P(12, 1) * _tmp58 - P(13, 1) * _tmp62 -
                        P(14, 1) * _tmp65 + P(2, 1) * _tmp80 + P(3, 1);
  const Scalar _tmp93 = P(1, 2) * _tmp76 - P(12, 2) * _tmp58 - P(13, 2) * _tmp62 -
                        P(14, 2) * _tmp65 + P(2, 2) * _tmp80 + P(3, 2);
  const Scalar _tmp94 = P(1, 13) * _tmp76 - P(12, 13) * _tmp58 - P(13, 13) * _tmp62 -
                        P(14, 13) * _tmp65 + P(2, 13) * _tmp80 + P(3, 13);
  const Scalar _tmp95 = P(1, 14) * _tmp76 - P(12, 14) * _tmp58 - P(13, 14) * _tmp62 -
                        P(14, 14) * _tmp65 + P(2, 14) * _tmp80 + P(3, 14);
  const Scalar _tmp96 = std::pow(dt, Scalar(2));
  const Scalar _tmp97 = _tmp96 * accel_var(0, 0);
  const Scalar _tmp98 = _tmp96 * accel_var(1, 0);
  const Scalar _tmp99 = _tmp96 * accel_var(2, 0);
  const Scalar _tmp100 = P(1, 3) * _tmp76 - P(12, 3) * _tmp58 - P(13, 3) * _tmp62 -
                         P(14, 3) * _tmp65 + P(2, 3) * _tmp80 + P(3, 3);
  const Scalar _tmp101 = 1 - 2 * _tmp13;
  const Scalar _tmp102 = _tmp101 + _tmp55;
  const Scalar _tmp103 = _tmp102 * dt;
  const Scalar _tmp104 = -_tmp7;
  const Scalar _tmp105 = _tmp104 + _tmp13;
  const Scalar _tmp106 = dt * (_tmp61 * _tmp75 + _tmp64 * _tmp73 + _tmp68 * (_tmp105 + _tmp72));
  const Scalar _tmp107 = -_tmp31;
  const Scalar _tmp108 = _tmp107 + _tmp33;
  const Scalar _tmp109 = _tmp108 * dt;
  const Scalar _tmp110 = _tmp19 + _tmp21;
  const Scalar _tmp111 = _tmp110 * dt;
  const Scalar _tmp112 = -_tmp1;
  const Scalar _tmp113 = _tmp11 + _tmp78;
  const Scalar _tmp114 =
      _tmp68 * (_tmp112 + _tmp4) + _tmp73 * (_tmp105 + _tmp113) + _tmp75 * (_tmp107 + _tmp79);
  const Scalar _tmp115 = _tmp26 * dt;
  const Scalar _tmp116 = P(0, 4) * _tmp18 + P(10, 4) * _tmp23 + P(11, 4) * _tmp6 + P(9, 4) * _tmp15;
  const Scalar _tmp117 =
      P(1, 0) * _tmp18 + P(10, 0) * _tmp30 + P(11, 0) * _tmp35 + P(9, 0) * _tmp37;
  const Scalar _tmp118 = _tmp114 * dt;
  const Scalar _tmp119 =
      P(1, 4) * _tmp18 + P(10, 4) * _tmp30 + P(11, 4) * _tmp35 + P(9, 4) * _tmp37;
  const Scalar _tmp120 =
      P(10, 0) * _tmp46 + P(11, 0) * _tmp45 + P(2, 0) * _tmp18 + P(9, 0) * _tmp48;
  const Scalar _tmp121 =
      P(10, 4) * _tmp46 + P(11, 4) * _tmp45 + P(2, 4) * _tmp18 + P(9, 4) * _tmp48;
  const Scalar _tmp122 = _tmp57 * _tmp97;
  const Scalar _tmp123 = _tmp61 * _tmp98;
  const Scalar _tmp124 = P(1, 0) * _tmp76 - P(12, 0) * _tmp58 - P(13, 0) * _tmp62 -
                         P(14, 0) * _tmp65 + P(2, 0) * _tmp80 + P(3, 0);
  const Scalar _tmp125 = _tmp64 * _tmp99;
  const Scalar _tmp126 = P(1, 4) * _tmp76 - P(12, 4) * _tmp58 - P(13, 4) * _tmp62 -
                         P(14, 4) * _tmp65 + P(2, 4) * _tmp80 + P(3, 4);
  const Scalar _tmp127 = P(0, 0) * _tmp118 - P(12, 0) * _tmp111 - P(13, 0) * _tmp103 -
                         P(14, 0) * _tmp109 + P(2, 0) * _tmp106 + P(4, 0);
  const Scalar _tmp128 = P(0, 13) * _tmp118 - P(12, 13) * _tmp111 - P(13, 13) * _tmp103 -
                         P(14, 13) * _tmp109 + P(2, 13) * _tmp106 + P(4, 13);
  const Scalar _tmp129 = P(0, 14) * _tmp118 - P(12, 14) * _tmp111 - P(13, 14) * _tmp103 -
                         P(14, 14) * _tmp109 + P(2, 14) * _tmp106 + P(4, 14);
  const Scalar _tmp130 = P(0, 12) * _tmp118 - P(12, 12) * _tmp111 - P(13, 12) * _tmp103 -
                         P(14, 12) * _tmp109 + P(2, 12) * _tmp106 + P(4, 12);
  const Scalar _tmp131 = P(0, 4) * _tmp118 - P(12, 4) * _tmp111 - P(13, 4) * _tmp103 -
                         P(14, 4) * _tmp109 + P(2, 4) * _tmp106 + P(4, 4);
  const Scalar _tmp132 = _tmp101 + _tmp56;
  const Scalar _tmp133 = _tmp132 * dt;
  const Scalar _tmp134 =
      dt * (_tmp68 * (_tmp113 + _tmp70) + _tmp73 * (_tmp112 + _tmp66) + _tmp75 * (_tmp21 + _tmp77));
  const Scalar _tmp135 = _tmp74 * dt;
  const Scalar _tmp136 = _tmp67 * dt;
  const Scalar _tmp137 = _tmp108 * _tmp73 + _tmp110 * _tmp68 + _tmp75 * (_tmp104 + _tmp17 + _tmp69);
  const Scalar _tmp138 = P(0, 5) * _tmp18 + P(10, 5) * _tmp23 + P(11, 5) * _tmp6 + P(9, 5) * _tmp15;
  const Scalar _tmp139 = _tmp137 * dt;
  const Scalar _tmp140 =
      P(1, 5) * _tmp18 + P(10, 5) * _tmp30 + P(11, 5) * _tmp35 + P(9, 5) * _tmp37;
  const Scalar _tmp141 =
      P(10, 5) * _tmp46 + P(11, 5) * _tmp45 + P(2, 5) * _tmp18 + P(9, 5) * _tmp48;
  const Scalar _tmp142 = P(1, 5) * _tmp76 - P(12, 5) * _tmp58 - P(13, 5) * _tmp62 -
                         P(14, 5) * _tmp65 + P(2, 5) * _tmp80 + P(3, 5);
  const Scalar _tmp143 = P(0, 5) * _tmp118 - P(12, 5) * _tmp111 - P(13, 5) * _tmp103 -
                         P(14, 5) * _tmp109 + P(2, 5) * _tmp106 + P(4, 5);
  const Scalar _tmp144 = P(0, 14) * _tmp139 + P(1, 14) * _tmp134 - P(12, 14) * _tmp136 -
                         P(13, 14) * _tmp135 - P(14, 14) * _tmp133 + P(5, 14);
  const Scalar _tmp145 = P(0, 13) * _tmp139 + P(1, 13) * _tmp134 - P(12, 13) * _tmp136 -
                         P(13, 13) * _tmp135 - P(14, 13) * _tmp133 + P(5, 13);
  const Scalar _tmp146 = P(0, 12) * _tmp139 + P(1, 12) * _tmp134 - P(12, 12) * _tmp136 -
                         P(13, 12) * _tmp135 - P(14, 12) * _tmp133 + P(5, 12);
  const Scalar _tmp147 = P(0, 5) * _tmp139 + P(1, 5) * _tmp134 - P(12, 5) * _tmp136 -
                         P(13, 5) * _tmp135 - P(14, 5) * _tmp133 + P(5, 5);

  // Output terms (1)
  Eigen::Matrix<Scalar, 23, 23> _res;

  _res(0, 0) = std::pow(_tmp15, Scalar(2)) * _tmp28 + _tmp15 * _tmp27 + _tmp18 * _tmp26 +
               std::pow(_tmp23, Scalar(2)) * _tmp28 + _tmp23 * _tmp25 + _tmp24 * _tmp6 +
               _tmp28 * std::pow(_tmp6, Scalar(2));
  _res(1, 0) = 0;
  _res(2, 0) = 0;
  _res(3, 0) = 0;
  _res(4, 0) = 0;
  _res(5, 0) = 0;
  _res(6, 0) = 0;
  _res(7, 0) = 0;
  _res(8, 0) = 0;
  _res(9, 0) = 0;
  _res(10, 0) = 0;
  _res(11, 0) = 0;
  _res(12, 0) = 0;
  _res(13, 0) = 0;
  _res(14, 0) = 0;
  _res(15, 0) = 0;
  _res(16, 0) = 0;
  _res(17, 0) = 0;
  _res(18, 0) = 0;
  _res(19, 0) = 0;
  _res(20, 0) = 0;
  _res(21, 0) = 0;
  _res(22, 0) = 0;
  _res(0, 1) = _tmp15 * _tmp39 + _tmp18 * _tmp36 + _tmp24 * _tmp35 + _tmp25 * _tmp30 +
               _tmp27 * _tmp37 + _tmp30 * _tmp38 + _tmp35 * _tmp40;
  _res(1, 1) = _tmp18 * _tmp44 + _tmp28 * std::pow(_tmp30, Scalar(2)) +
               _tmp28 * std::pow(_tmp35, Scalar(2)) + _tmp28 * std::pow(_tmp37, Scalar(2)) +
               _tmp30 * _tmp41 + _tmp35 * _tmp42 + _tmp37 * _tmp43;
  _res(2, 1) = 0;
  _res(3, 1) = 0;
  _res(4, 1) = 0;
  _res(5, 1) = 0;
  _res(6, 1) = 0;
  _res(7, 1) = 0;
  _res(8, 1) = 0;
  _res(9, 1) = 0;
  _res(10, 1) = 0;
  _res(11, 1) = 0;
  _res(12, 1) = 0;
  _res(13, 1) = 0;
  _res(14, 1) = 0;
  _res(15, 1) = 0;
  _res(16, 1) = 0;
  _res(17, 1) = 0;
  _res(18, 1) = 0;
  _res(19, 1) = 0;
  _res(20, 1) = 0;
  _res(21, 1) = 0;
  _res(22, 1) = 0;
  _res(0, 2) = _tmp15 * _tmp28 * _tmp48 + _tmp18 * _tmp47 + _tmp24 * _tmp45 + _tmp25 * _tmp46 +
               _tmp27 * _tmp48 + _tmp38 * _tmp46 + _tmp40 * _tmp45;
  _res(1, 2) = _tmp18 * _tmp49 + _tmp28 * _tmp30 * _tmp46 + _tmp28 * _tmp35 * _tmp45 +
               _tmp39 * _tmp48 + _tmp41 * _tmp46 + _tmp42 * _tmp45 + _tmp43 * _tmp48;
  _res(2, 2) = _tmp18 * _tmp52 + _tmp28 * std::pow(_tmp45, Scalar(2)) +
               _tmp28 * std::pow(_tmp46, Scalar(2)) + _tmp28 * std::pow(_tmp48, Scalar(2)) +
               _tmp45 * _tmp51 + _tmp46 * _tmp50 + _tmp48 * _tmp53;
  _res(3, 2) = 0;
  _res(4, 2) = 0;
  _res(5, 2) = 0;
  _res(6, 2) = 0;
  _res(7, 2) = 0;
  _res(8, 2) = 0;
  _res(9, 2) = 0;
  _res(10, 2) = 0;
  _res(11, 2) = 0;
  _res(12, 2) = 0;
  _res(13, 2) = 0;
  _res(14, 2) = 0;
  _res(15, 2) = 0;
  _res(16, 2) = 0;
  _res(17, 2) = 0;
  _res(18, 2) = 0;
  _res(19, 2) = 0;
  _res(20, 2) = 0;
  _res(21, 2) = 0;
  _res(22, 2) = 0;
  _res(0, 3) = _tmp36 * _tmp76 + _tmp47 * _tmp80 - _tmp54 * _tmp58 - _tmp59 * _tmp62 -
               _tmp63 * _tmp65 + _tmp81;
  _res(1, 3) = _tmp44 * _tmp76 + _tmp49 * _tmp80 - _tmp58 * _tmp82 - _tmp62 * _tmp83 -
               _tmp65 * _tmp84 + _tmp85;
  _res(2, 3) = _tmp52 * _tmp80 - _tmp58 * _tmp86 - _tmp62 * _tmp88 - _tmp65 * _tmp89 +
               _tmp76 * _tmp87 + _tmp90;
  _res(3, 3) = _tmp100 + std::pow(_tmp57, Scalar(2)) * _tmp97 - _tmp58 * _tmp91 +
               std::pow(_tmp61, Scalar(2)) * _tmp98 - _tmp62 * _tmp94 +
               std::pow(_tmp64, Scalar(2)) * _tmp99 - _tmp65 * _tmp95 + _tmp76 * _tmp92 +
               _tmp80 * _tmp93;
  _res(4, 3) = 0;
  _res(5, 3) = 0;
  _res(6, 3) = 0;
  _res(7, 3) = 0;
  _res(8, 3) = 0;
  _res(9, 3) = 0;
  _res(10, 3) = 0;
  _res(11, 3) = 0;
  _res(12, 3) = 0;
  _res(13, 3) = 0;
  _res(14, 3) = 0;
  _res(15, 3) = 0;
  _res(16, 3) = 0;
  _res(17, 3) = 0;
  _res(18, 3) = 0;
  _res(19, 3) = 0;
  _res(20, 3) = 0;
  _res(21, 3) = 0;
  _res(22, 3) = 0;
  _res(0, 4) = -_tmp103 * _tmp59 + _tmp106 * _tmp47 - _tmp109 * _tmp63 - _tmp111 * _tmp54 +
               _tmp114 * _tmp115 + _tmp116;
  _res(1, 4) = -_tmp103 * _tmp83 + _tmp106 * _tmp49 - _tmp109 * _tmp84 - _tmp111 * _tmp82 +
               _tmp117 * _tmp118 + _tmp119;
  _res(2, 4) = -_tmp103 * _tmp88 + _tmp106 * _tmp52 - _tmp109 * _tmp89 - _tmp111 * _tmp86 +
               _tmp118 * _tmp120 + _tmp121;
  _res(3, 4) = _tmp102 * _tmp123 - _tmp103 * _tmp94 + _tmp106 * _tmp93 + _tmp108 * _tmp125 -
               _tmp109 * _tmp95 + _tmp110 * _tmp122 - _tmp111 * _tmp91 + _tmp118 * _tmp124 +
               _tmp126;
  _res(4, 4) = std::pow(_tmp102, Scalar(2)) * _tmp98 - _tmp103 * _tmp128 +
               _tmp106 * (P(0, 2) * _tmp118 - P(12, 2) * _tmp111 - P(13, 2) * _tmp103 -
                          P(14, 2) * _tmp109 + P(2, 2) * _tmp106 + P(4, 2)) +
               std::pow(_tmp108, Scalar(2)) * _tmp99 - _tmp109 * _tmp129 +
               std::pow(_tmp110, Scalar(2)) * _tmp97 - _tmp111 * _tmp130 + _tmp118 * _tmp127 +
               _tmp131;
  _res(5, 4) = 0;
  _res(6, 4) = 0;
  _res(7, 4) = 0;
  _res(8, 4) = 0;
  _res(9, 4) = 0;
  _res(10, 4) = 0;
  _res(11, 4) = 0;
  _res(12, 4) = 0;
  _res(13, 4) = 0;
  _res(14, 4) = 0;
  _res(15, 4) = 0;
  _res(16, 4) = 0;
  _res(17, 4) = 0;
  _res(18, 4) = 0;
  _res(19, 4) = 0;
  _res(20, 4) = 0;
  _res(21, 4) = 0;
  _res(22, 4) = 0;
  _res(0, 5) = _tmp115 * _tmp137 - _tmp133 * _tmp63 + _tmp134 * _tmp36 - _tmp135 * _tmp59 -
               _tmp136 * _tmp54 + _tmp138;
  _res(1, 5) = _tmp117 * _tmp139 - _tmp133 * _tmp84 + _tmp134 * _tmp44 - _tmp135 * _tmp83 -
               _tmp136 * _tmp82 + _tmp140;
  _res(2, 5) = _tmp120 * _tmp139 - _tmp133 * _tmp89 + _tmp134 * _tmp87 - _tmp135 * _tmp88 -
               _tmp136 * _tmp86 + _tmp141;
  _res(3, 5) = _tmp122 * _tmp67 + _tmp123 * _tmp74 + _tmp124 * _tmp139 + _tmp125 * _tmp132 -
               _tmp133 * _tmp95 + _tmp134 * _tmp92 - _tmp135 * _tmp94 - _tmp136 * _tmp91 + _tmp142;
  _res(4, 5) = _tmp102 * _tmp74 * _tmp98 + _tmp108 * _tmp132 * _tmp99 + _tmp110 * _tmp67 * _tmp97 +
               _tmp127 * _tmp139 - _tmp128 * _tmp135 - _tmp129 * _tmp133 - _tmp130 * _tmp136 +
               _tmp134 * (P(0, 1) * _tmp118 - P(12, 1) * _tmp111 - P(13, 1) * _tmp103 -
                          P(14, 1) * _tmp109 + P(2, 1) * _tmp106 + P(4, 1)) +
               _tmp143;
  _res(5, 5) = std::pow(_tmp132, Scalar(2)) * _tmp99 - _tmp133 * _tmp144 +
               _tmp134 * (P(0, 1) * _tmp139 + P(1, 1) * _tmp134 - P(12, 1) * _tmp136 -
                          P(13, 1) * _tmp135 - P(14, 1) * _tmp133 + P(5, 1)) -
               _tmp135 * _tmp145 - _tmp136 * _tmp146 +
               _tmp139 * (P(0, 0) * _tmp139 + P(1, 0) * _tmp134 - P(12, 0) * _tmp136 -
                          P(13, 0) * _tmp135 - P(14, 0) * _tmp133 + P(5, 0)) +
               _tmp147 + std::pow(_tmp67, Scalar(2)) * _tmp97 +
               std::pow(_tmp74, Scalar(2)) * _tmp98;
  _res(6, 5) = 0;
  _res(7, 5) = 0;
  _res(8, 5) = 0;
  _res(9, 5) = 0;
  _res(10, 5) = 0;
  _res(11, 5) = 0;
  _res(12, 5) = 0;
  _res(13, 5) = 0;
  _res(14, 5) = 0;
  _res(15, 5) = 0;
  _res(16, 5) = 0;
  _res(17, 5) = 0;
  _res(18, 5) = 0;
  _res(19, 5) = 0;
  _res(20, 5) = 0;
  _res(21, 5) = 0;
  _res(22, 5) = 0;
  _res(0, 6) =
      P(0, 6) * _tmp18 + P(10, 6) * _tmp23 + P(11, 6) * _tmp6 + P(9, 6) * _tmp15 + _tmp81 * dt;
  _res(1, 6) =
      P(1, 6) * _tmp18 + P(10, 6) * _tmp30 + P(11, 6) * _tmp35 + P(9, 6) * _tmp37 + _tmp85 * dt;
  _res(2, 6) =
      P(10, 6) * _tmp46 + P(11, 6) * _tmp45 + P(2, 6) * _tmp18 + P(9, 6) * _tmp48 + _tmp90 * dt;
  _res(3, 6) = P(1, 6) * _tmp76 - P(12, 6) * _tmp58 - P(13, 6) * _tmp62 - P(14, 6) * _tmp65 +
               P(2, 6) * _tmp80 + P(3, 6) + _tmp100 * dt;
  _res(4, 6) = P(0, 6) * _tmp118 - P(12, 6) * _tmp111 - P(13, 6) * _tmp103 - P(14, 6) * _tmp109 +
               P(2, 6) * _tmp106 + P(4, 6) +
               dt * (P(0, 3) * _tmp118 - P(12, 3) * _tmp111 - P(13, 3) * _tmp103 -
                     P(14, 3) * _tmp109 + P(2, 3) * _tmp106 + P(4, 3));
  _res(5, 6) = P(0, 6) * _tmp139 + P(1, 6) * _tmp134 - P(12, 6) * _tmp136 - P(13, 6) * _tmp135 -
               P(14, 6) * _tmp133 + P(5, 6) +
               dt * (P(0, 3) * _tmp139 + P(1, 3) * _tmp134 - P(12, 3) * _tmp136 -
                     P(13, 3) * _tmp135 - P(14, 3) * _tmp133 + P(5, 3));
  _res(6, 6) = P(3, 6) * dt + P(6, 6) + dt * (P(3, 3) * dt + P(6, 3));
  _res(7, 6) = 0;
  _res(8, 6) = 0;
  _res(9, 6) = 0;
  _res(10, 6) = 0;
  _res(11, 6) = 0;
  _res(12, 6) = 0;
  _res(13, 6) = 0;
  _res(14, 6) = 0;
  _res(15, 6) = 0;
  _res(16, 6) = 0;
  _res(17, 6) = 0;
  _res(18, 6) = 0;
  _res(19, 6) = 0;
  _res(20, 6) = 0;
  _res(21, 6) = 0;
  _res(22, 6) = 0;
  _res(0, 7) =
      P(0, 7) * _tmp18 + P(10, 7) * _tmp23 + P(11, 7) * _tmp6 + P(9, 7) * _tmp15 + _tmp116 * dt;
  _res(1, 7) =
      P(1, 7) * _tmp18 + P(10, 7) * _tmp30 + P(11, 7) * _tmp35 + P(9, 7) * _tmp37 + _tmp119 * dt;
  _res(2, 7) =
      P(10, 7) * _tmp46 + P(11, 7) * _tmp45 + P(2, 7) * _tmp18 + P(9, 7) * _tmp48 + _tmp121 * dt;
  _res(3, 7) = P(1, 7) * _tmp76 - P(12, 7) * _tmp58 - P(13, 7) * _tmp62 - P(14, 7) * _tmp65 +
               P(2, 7) * _tmp80 + P(3, 7) + _tmp126 * dt;
  _res(4, 7) = P(0, 7) * _tmp118 - P(12, 7) * _tmp111 - P(13, 7) * _tmp103 - P(14, 7) * _tmp109 +
               P(2, 7) * _tmp106 + P(4, 7) + _tmp131 * dt;
  _res(5, 7) = P(0, 7) * _tmp139 + P(1, 7) * _tmp134 - P(12, 7) * _tmp136 - P(13, 7) * _tmp135 -
               P(14, 7) * _tmp133 + P(5, 7) +
               dt * (P(0, 4) * _tmp139 + P(1, 4) * _tmp134 - P(12, 4) * _tmp136 -
                     P(13, 4) * _tmp135 - P(14, 4) * _tmp133 + P(5, 4));
  _res(6, 7) = P(3, 7) * dt + P(6, 7) + dt * (P(3, 4) * dt + P(6, 4));
  _res(7, 7) = P(4, 7) * dt + P(7, 7) + dt * (P(4, 4) * dt + P(7, 4));
  _res(8, 7) = 0;
  _res(9, 7) = 0;
  _res(10, 7) = 0;
  _res(11, 7) = 0;
  _res(12, 7) = 0;
  _res(13, 7) = 0;
  _res(14, 7) = 0;
  _res(15, 7) = 0;
  _res(16, 7) = 0;
  _res(17, 7) = 0;
  _res(18, 7) = 0;
  _res(19, 7) = 0;
  _res(20, 7) = 0;
  _res(21, 7) = 0;
  _res(22, 7) = 0;
  _res(0, 8) =
      P(0, 8) * _tmp18 + P(10, 8) * _tmp23 + P(11, 8) * _tmp6 + P(9, 8) * _tmp15 + _tmp138 * dt;
  _res(1, 8) =
      P(1, 8) * _tmp18 + P(10, 8) * _tmp30 + P(11, 8) * _tmp35 + P(9, 8) * _tmp37 + _tmp140 * dt;
  _res(2, 8) =
      P(10, 8) * _tmp46 + P(11, 8) * _tmp45 + P(2, 8) * _tmp18 + P(9, 8) * _tmp48 + _tmp141 * dt;
  _res(3, 8) = P(1, 8) * _tmp76 - P(12, 8) * _tmp58 - P(13, 8) * _tmp62 - P(14, 8) * _tmp65 +
               P(2, 8) * _tmp80 + P(3, 8) + _tmp142 * dt;
  _res(4, 8) = P(0, 8) * _tmp118 - P(12, 8) * _tmp111 - P(13, 8) * _tmp103 - P(14, 8) * _tmp109 +
               P(2, 8) * _tmp106 + P(4, 8) + _tmp143 * dt;
  _res(5, 8) = P(0, 8) * _tmp139 + P(1, 8) * _tmp134 - P(12, 8) * _tmp136 - P(13, 8) * _tmp135 -
               P(14, 8) * _tmp133 + P(5, 8) + _tmp147 * dt;
  _res(6, 8) = P(3, 8) * dt + P(6, 8) + dt * (P(3, 5) * dt + P(6, 5));
  _res(7, 8) = P(4, 8) * dt + P(7, 8) + dt * (P(4, 5) * dt + P(7, 5));
  _res(8, 8) = P(5, 8) * dt + P(8, 8) + dt * (P(5, 5) * dt + P(8, 5));
  _res(9, 8) = 0;
  _res(10, 8) = 0;
  _res(11, 8) = 0;
  _res(12, 8) = 0;
  _res(13, 8) = 0;
  _res(14, 8) = 0;
  _res(15, 8) = 0;
  _res(16, 8) = 0;
  _res(17, 8) = 0;
  _res(18, 8) = 0;
  _res(19, 8) = 0;
  _res(20, 8) = 0;
  _res(21, 8) = 0;
  _res(22, 8) = 0;
  _res(0, 9) = _tmp27;
  _res(1, 9) = _tmp43;
  _res(2, 9) = _tmp53;
  _res(3, 9) = P(1, 9) * _tmp76 - P(12, 9) * _tmp58 - P(13, 9) * _tmp62 - P(14, 9) * _tmp65 +
               P(2, 9) * _tmp80 + P(3, 9);
  _res(4, 9) = P(0, 9) * _tmp118 - P(12, 9) * _tmp111 - P(13, 9) * _tmp103 - P(14, 9) * _tmp109 +
               P(2, 9) * _tmp106 + P(4, 9);
  _res(5, 9) = P(0, 9) * _tmp139 + P(1, 9) * _tmp134 - P(12, 9) * _tmp136 - P(13, 9) * _tmp135 -
               P(14, 9) * _tmp133 + P(5, 9);
  _res(6, 9) = P(3, 9) * dt + P(6, 9);
  _res(7, 9) = P(4, 9) * dt + P(7, 9);
  _res(8, 9) = P(5, 9) * dt + P(8, 9);
  _res(9, 9) = P(9, 9);
  _res(10, 9) = 0;
  _res(11, 9) = 0;
  _res(12, 9) = 0;
  _res(13, 9) = 0;
  _res(14, 9) = 0;
  _res(15, 9) = 0;
  _res(16, 9) = 0;
  _res(17, 9) = 0;
  _res(18, 9) = 0;
  _res(19, 9) = 0;
  _res(20, 9) = 0;
  _res(21, 9) = 0;
  _res(22, 9) = 0;
  _res(0, 10) = _tmp25;
  _res(1, 10) = _tmp41;
  _res(2, 10) = _tmp50;
  _res(3, 10) = P(1, 10) * _tmp76 - P(12, 10) * _tmp58 - P(13, 10) * _tmp62 - P(14, 10) * _tmp65 +
                P(2, 10) * _tmp80 + P(3, 10);
  _res(4, 10) = P(0, 10) * _tmp118 - P(12, 10) * _tmp111 - P(13, 10) * _tmp103 -
                P(14, 10) * _tmp109 + P(2, 10) * _tmp106 + P(4, 10);
  _res(5, 10) = P(0, 10) * _tmp139 + P(1, 10) * _tmp134 - P(12, 10) * _tmp136 -
                P(13, 10) * _tmp135 - P(14, 10) * _tmp133 + P(5, 10);
  _res(6, 10) = P(3, 10) * dt + P(6, 10);
  _res(7, 10) = P(4, 10) * dt + P(7, 10);
  _res(8, 10) = P(5, 10) * dt + P(8, 10);
  _res(9, 10) = P(9, 10);
  _res(10, 10) = P(10, 10);
  _res(11, 10) = 0;
  _res(12, 10) = 0;
  _res(13, 10) = 0;
  _res(14, 10) = 0;
  _res(15, 10) = 0;
  _res(16, 10) = 0;
  _res(17, 10) = 0;
  _res(18, 10) = 0;
  _res(19, 10) = 0;
  _res(20, 10) = 0;
  _res(21, 10) = 0;
  _res(22, 10) = 0;
  _res(0, 11) = _tmp24;
  _res(1, 11) = _tmp42;
  _res(2, 11) = _tmp51;
  _res(3, 11) = P(1, 11) * _tmp76 - P(12, 11) * _tmp58 - P(13, 11) * _tmp62 - P(14, 11) * _tmp65 +
                P(2, 11) * _tmp80 + P(3, 11);
  _res(4, 11) = P(0, 11) * _tmp118 - P(12, 11) * _tmp111 - P(13, 11) * _tmp103 -
                P(14, 11) * _tmp109 + P(2, 11) * _tmp106 + P(4, 11);
  _res(5, 11) = P(0, 11) * _tmp139 + P(1, 11) * _tmp134 - P(12, 11) * _tmp136 -
                P(13, 11) * _tmp135 - P(14, 11) * _tmp133 + P(5, 11);
  _res(6, 11) = P(3, 11) * dt + P(6, 11);
  _res(7, 11) = P(4, 11) * dt + P(7, 11);
  _res(8, 11) = P(5, 11) * dt + P(8, 11);
  _res(9, 11) = P(9, 11);
  _res(10, 11) = P(10, 11);
  _res(11, 11) = P(11, 11);
  _res(12, 11) = 0;
  _res(13, 11) = 0;
  _res(14, 11) = 0;
  _res(15, 11) = 0;
  _res(16, 11) = 0;
  _res(17, 11) = 0;
  _res(18, 11) = 0;
  _res(19, 11) = 0;
  _res(20, 11) = 0;
  _res(21, 11) = 0;
  _res(22, 11) = 0;
  _res(0, 12) = _tmp54;
  _res(1, 12) = _tmp82;
  _res(2, 12) = _tmp86;
  _res(3, 12) = _tmp91;
  _res(4, 12) = _tmp130;
  _res(5, 12) = _tmp146;
  _res(6, 12) = P(3, 12) * dt + P(6, 12);
  _res(7, 12) = P(4, 12) * dt + P(7, 12);
  _res(8, 12) = P(5, 12) * dt + P(8, 12);
  _res(9, 12) = P(9, 12);
  _res(10, 12) = P(10, 12);
  _res(11, 12) = P(11, 12);
  _res(12, 12) = P(12, 12);
  _res(13, 12) = 0;
  _res(14, 12) = 0;
  _res(15, 12) = 0;
  _res(16, 12) = 0;
  _res(17, 12) = 0;
  _res(18, 12) = 0;
  _res(19, 12) = 0;
  _res(20, 12) = 0;
  _res(21, 12) = 0;
  _res(22, 12) = 0;
  _res(0, 13) = _tmp59;
  _res(1, 13) = _tmp83;
  _res(2, 13) = _tmp88;
  _res(3, 13) = _tmp94;
  _res(4, 13) = _tmp128;
  _res(5, 13) = _tmp145;
  _res(6, 13) = P(3, 13) * dt + P(6, 13);
  _res(7, 13) = P(4, 13) * dt + P(7, 13);
  _res(8, 13) = P(5, 13) * dt + P(8, 13);
  _res(9, 13) = P(9, 13);
  _res(10, 13) = P(10, 13);
  _res(11, 13) = P(11, 13);
  _res(12, 13) = P(12, 13);
  _res(13, 13) = P(13, 13);
  _res(14, 13) = 0;
  _res(15, 13) = 0;
  _res(16, 13) = 0;
  _res(17, 13) = 0;
  _res(18, 13) = 0;
  _res(19, 13) = 0;
  _res(20, 13) = 0;
  _res(21, 13) = 0;
  _res(22, 13) = 0;
  _res(0, 14) = _tmp63;
  _res(1, 14) = _tmp84;
  _res(2, 14) = _tmp89;
  _res(3, 14) = _tmp95;
  _res(4, 14) = _tmp129;
  _res(5, 14) = _tmp144;
  _res(6, 14) = P(3, 14) * dt + P(6, 14);
  _res(7, 14) = P(4, 14) * dt + P(7, 14);
  _res(8, 14) = P(5, 14) * dt + P(8, 14);
  _res(9, 14) = P(9, 14);
  _res(10, 14) = P(10, 14);
  _res(11, 14) = P(11, 14);
  _res(12, 14) = P(12, 14);
  _res(13, 14) = P(13, 14);
  _res(14, 14) = P(14, 14);
  _res(15, 14) = 0;
  _res(16, 14) = 0;
  _res(17, 14) = 0;
  _res(18, 14) = 0;
  _res(19, 14) = 0;
  _res(20, 14) = 0;
  _res(21, 14) = 0;
  _res(22, 14) = 0;
  _res(0, 15) = P(0, 15) * _tmp18 + P(10, 15) * _tmp23 + P(11, 15) * _tmp6 + P(9, 15) * _tmp15;
  _res(1, 15) = P(1, 15) * _tmp18 + P(10, 15) * _tmp30 + P(11, 15) * _tmp35 + P(9, 15) * _tmp37;
  _res(2, 15) = P(10, 15) * _tmp46 + P(11, 15) * _tmp45 + P(2, 15) * _tmp18 + P(9, 15) * _tmp48;
  _res(3, 15) = P(1, 15) * _tmp76 - P(12, 15) * _tmp58 - P(13, 15) * _tmp62 - P(14, 15) * _tmp65 +
                P(2, 15) * _tmp80 + P(3, 15);
  _res(4, 15) = P(0, 15) * _tmp118 - P(12, 15) * _tmp111 - P(13, 15) * _tmp103 -
                P(14, 15) * _tmp109 + P(2, 15) * _tmp106 + P(4, 15);
  _res(5, 15) = P(0, 15) * _tmp139 + P(1, 15) * _tmp134 - P(12, 15) * _tmp136 -
                P(13, 15) * _tmp135 - P(14, 15) * _tmp133 + P(5, 15);
  _res(6, 15) = P(3, 15) * dt + P(6, 15);
  _res(7, 15) = P(4, 15) * dt + P(7, 15);
  _res(8, 15) = P(5, 15) * dt + P(8, 15);
  _res(9, 15) = P(9, 15);
  _res(10, 15) = P(10, 15);
  _res(11, 15) = P(11, 15);
  _res(12, 15) = P(12, 15);
  _res(13, 15) = P(13, 15);
  _res(14, 15) = P(14, 15);
  _res(15, 15) = P(15, 15);
  _res(16, 15) = 0;
  _res(17, 15) = 0;
  _res(18, 15) = 0;
  _res(19, 15) = 0;
  _res(20, 15) = 0;
  _res(21, 15) = 0;
  _res(22, 15) = 0;
  _res(0, 16) = P(0, 16) * _tmp18 + P(10, 16) * _tmp23 + P(11, 16) * _tmp6 + P(9, 16) * _tmp15;
  _res(1, 16) = P(1, 16) * _tmp18 + P(10, 16) * _tmp30 + P(11, 16) * _tmp35 + P(9, 16) * _tmp37;
  _res(2, 16) = P(10, 16) * _tmp46 + P(11, 16) * _tmp45 + P(2, 16) * _tmp18 + P(9, 16) * _tmp48;
  _res(3, 16) = P(1, 16) * _tmp76 - P(12, 16) * _tmp58 - P(13, 16) * _tmp62 - P(14, 16) * _tmp65 +
                P(2, 16) * _tmp80 + P(3, 16);
  _res(4, 16) = P(0, 16) * _tmp118 - P(12, 16) * _tmp111 - P(13, 16) * _tmp103 -
                P(14, 16) * _tmp109 + P(2, 16) * _tmp106 + P(4, 16);
  _res(5, 16) = P(0, 16) * _tmp139 + P(1, 16) * _tmp134 - P(12, 16) * _tmp136 -
                P(13, 16) * _tmp135 - P(14, 16) * _tmp133 + P(5, 16);
  _res(6, 16) = P(3, 16) * dt + P(6, 16);
  _res(7, 16) = P(4, 16) * dt + P(7, 16);
  _res(8, 16) = P(5, 16) * dt + P(8, 16);
  _res(9, 16) = P(9, 16);
  _res(10, 16) = P(10, 16);
  _res(11, 16) = P(11, 16);
  _res(12, 16) = P(12, 16);
  _res(13, 16) = P(13, 16);
  _res(14, 16) = P(14, 16);
  _res(15, 16) = P(15, 16);
  _res(16, 16) = P(16, 16);
  _res(17, 16) = 0;
  _res(18, 16) = 0;
  _res(19, 16) = 0;
  _res(20, 16) = 0;
  _res(21, 16) = 0;
  _res(22, 16) = 0;
  _res(0, 17) = P(0, 17) * _tmp18 + P(10, 17) * _tmp23 + P(11, 17) * _tmp6 + P(9, 17) * _tmp15;
  _res(1, 17) = P(1, 17) * _tmp18 + P(10, 17) * _tmp30 + P(11, 17) * _tmp35 + P(9, 17) * _tmp37;
  _res(2, 17) = P(10, 17) * _tmp46 + P(11, 17) * _tmp45 + P(2, 17) * _tmp18 + P(9, 17) * _tmp48;
  _res(3, 17) = P(1, 17) * _tmp76 - P(12, 17) * _tmp58 - P(13, 17) * _tmp62 - P(14, 17) * _tmp65 +
                P(2, 17) * _tmp80 + P(3, 17);
  _res(4, 17) = P(0, 17) * _tmp118 - P(12, 17) * _tmp111 - P(13, 17) * _tmp103 -
                P(14, 17) * _tmp109 + P(2, 17) * _tmp106 + P(4, 17);
  _res(5, 17) = P(0, 17) * _tmp139 + P(1, 17) * _tmp134 - P(12, 17) * _tmp136 -
                P(13, 17) * _tmp135 - P(14, 17) * _tmp133 + P(5, 17);
  _res(6, 17) = P(3, 17) * dt + P(6, 17);
  _res(7, 17) = P(4, 17) * dt + P(7, 17);
  _res(8, 17) = P(5, 17) * dt + P(8, 17);
  _res(9, 17) = P(9, 17);
  _res(10, 17) = P(10, 17);
  _res(11, 17) = P(11, 17);
  _res(12, 17) = P(12, 17);
  _res(13, 17) = P(13, 17);
  _res(14, 17) = P(14, 17);
  _res(15, 17) = P(15, 17);
  _res(16, 17) = P(16, 17);
  _res(17, 17) = P(17, 17);
  _res(18, 17) = 0;
  _res(19, 17) = 0;
  _res(20, 17) = 0;
  _res(21, 17) = 0;
  _res(22, 17) = 0;
  _res(0, 18) = P(0, 18) * _tmp18 + P(10, 18) * _tmp23 + P(11, 18) * _tmp6 + P(9, 18) * _tmp15;
  _res(1, 18) = P(1, 18) * _tmp18 + P(10, 18) * _tmp30 + P(11, 18) * _tmp35 + P(9, 18) * _tmp37;
  _res(2, 18) = P(10, 18) * _tmp46 + P(11, 18) * _tmp45 + P(2, 18) * _tmp18 + P(9, 18) * _tmp48;
  _res(3, 18) = P(1, 18) * _tmp76 - P(12, 18) * _tmp58 - P(13, 18) * _tmp62 - P(14, 18) * _tmp65 +
                P(2, 18) * _tmp80 + P(3, 18);
  _res(4, 18) = P(0, 18) * _tmp118 - P(12, 18) * _tmp111 - P(13, 18) * _tmp103 -
                P(14, 18) * _tmp109 + P(2, 18) * _tmp106 + P(4, 18);
  _res(5, 18) = P(0, 18) * _tmp139 + P(1, 18) * _tmp134 - P(12, 18) * _tmp136 -
                P(13, 18) * _tmp135 - P(14, 18) * _tmp133 + P(5, 18);
  _res(6, 18) = P(3, 18) * dt + P(6, 18);
  _res(7, 18) = P(4, 18) * dt + P(7, 18);
  _res(8, 18) = P(5, 18) * dt + P(8, 18);
  _res(9, 18) = P(9, 18);
  _res(10, 18) = P(10, 18);
  _res(11, 18) = P(11, 18);
  _res(12, 18) = P(12, 18);
  _res(13, 18) = P(13, 18);
  _res(14, 18) = P(14, 18);
  _res(15, 18) = P(15, 18);
  _res(16, 18) = P(16, 18);
  _res(17, 18) = P(17, 18);
  _res(18, 18) = P(18, 18);
  _res(19, 18) = 0;
  _res(20, 18) = 0;
  _res(21, 18) = 0;
  _res(22, 18) = 0;
  _res(0, 19) = P(0, 19) * _tmp18 + P(10, 19) * _tmp23 + P(11, 19) * _tmp6 + P(9, 19) * _tmp15;
  _res(1, 19) = P(1, 19) * _tmp18 + P(10, 19) * _tmp30 + P(11, 19) * _tmp35 + P(9, 19) * _tmp37;
  _res(2, 19) = P(10, 19) * _tmp46 + P(11, 19) * _tmp45 + P(2, 19) * _tmp18 + P(9, 19) * _tmp48;
  _res(3, 19) = P(1, 19) * _tmp76 - P(12, 19) * _tmp58 - P(13, 19) * _tmp62 - P(14, 19) * _tmp65 +
                P(2, 19) * _tmp80 + P(3, 19);
  _res(4, 19) = P(0, 19) * _tmp118 - P(12, 19) * _tmp111 - P(13, 19) * _tmp103 -
                P(14, 19) * _tmp109 + P(2, 19) * _tmp106 + P(4, 19);
  _res(5, 19) = P(0, 19) * _tmp139 + P(1, 19) * _tmp134 - P(12, 19) * _tmp136 -
                P(13, 19) * _tmp135 - P(14, 19) * _tmp133 + P(5, 19);
  _res(6, 19) = P(3, 19) * dt + P(6, 19);
  _res(7, 19) = P(4, 19) * dt + P(7, 19);
  _res(8, 19) = P(5, 19) * dt + P(8, 19);
  _res(9, 19) = P(9, 19);
  _res(10, 19) = P(10, 19);
  _res(11, 19) = P(11, 19);
  _res(12, 19) = P(12, 19);
  _res(13, 19) = P(13, 19);
  _res(14, 19) = P(14, 19);
  _res(15, 19) = P(15, 19);
  _res(16, 19) = P(16, 19);
  _res(17, 19) = P(17, 19);
  _res(18, 19) = P(18, 19);
  _res(19, 19) = P(19, 19);
  _res(20, 19) = 0;
  _res(21, 19) = 0;
  _res(22, 19) = 0;
  _res(0, 20) = P(0, 20) * _tmp18 + P(10, 20) * _tmp23 + P(11, 20) * _tmp6 + P(9, 20) * _tmp15;
  _res(1, 20) = P(1, 20) * _tmp18 + P(10, 20) * _tmp30 + P(11, 20) * _tmp35 + P(9, 20) * _tmp37;
  _res(2, 20) = P(10, 20) * _tmp46 + P(11, 20) * _tmp45 + P(2, 20) * _tmp18 + P(9, 20) * _tmp48;
  _res(3, 20) = P(1, 20) * _tmp76 - P(12, 20) * _tmp58 - P(13, 20) * _tmp62 - P(14, 20) * _tmp65 +
                P(2, 20) * _tmp80 + P(3, 20);
  _res(4, 20) = P(0, 20) * _tmp118 - P(12, 20) * _tmp111 - P(13, 20) * _tmp103 -
                P(14, 20) * _tmp109 + P(2, 20) * _tmp106 + P(4, 20);
  _res(5, 20) = P(0, 20) * _tmp139 + P(1, 20) * _tmp134 - P(12, 20) * _tmp136 -
                P(13, 20) * _tmp135 - P(14, 20) * _tmp133 + P(5, 20);
  _res(6, 20) = P(3, 20) * dt + P(6, 20);
  _res(7, 20) = P(4, 20) * dt + P(7, 20);
  _res(8, 20) = P(5, 20) * dt + P(8, 20);
  _res(9, 20) = P(9, 20);
  _res(10, 20) = P(10, 20);
  _res(11, 20) = P(11, 20);
  _res(12, 20) = P(12, 20);
  _res(13, 20) = P(13, 20);
  _res(14, 20) = P(14, 20);
  _res(15, 20) = P(15, 20);
  _res(16, 20) = P(16, 20);
  _res(17, 20) = P(17, 20);
  _res(18, 20) = P(18, 20);
  _res(19, 20) = P(19, 20);
  _res(20, 20) = P(20, 20);
  _res(21, 20) = 0;
  _res(22, 20) = 0;
  _res(0, 21) = P(0, 21) * _tmp18 + P(10, 21) * _tmp23 + P(11, 21) * _tmp6 + P(9, 21) * _tmp15;
  _res(1, 21) = P(1, 21) * _tmp18 + P(10, 21) * _tmp30 + P(11, 21) * _tmp35 + P(9, 21) * _tmp37;
  _res(2, 21) = P(10, 21) * _tmp46 + P(11, 21) * _tmp45 + P(2, 21) * _tmp18 + P(9, 21) * _tmp48;
  _res(3, 21) = P(1, 21) * _tmp76 - P(12, 21) * _tmp58 - P(13, 21) * _tmp62 - P(14, 21) * _tmp65 +
                P(2, 21) * _tmp80 + P(3, 21);
  _res(4, 21) = P(0, 21) * _tmp118 - P(12, 21) * _tmp111 - P(13, 21) * _tmp103 -
                P(14, 21) * _tmp109 + P(2, 21) * _tmp106 + P(4, 21);
  _res(5, 21) = P(0, 21) * _tmp139 + P(1, 21) * _tmp134 - P(12, 21) * _tmp136 -
                P(13, 21) * _tmp135 - P(14, 21) * _tmp133 + P(5, 21);
  _res(6, 21) = P(3, 21) * dt + P(6, 21);
  _res(7, 21) = P(4, 21) * dt + P(7, 21);
  _res(8, 21) = P(5, 21) * dt + P(8, 21);
  _res(9, 21) = P(9, 21);
  _res(10, 21) = P(10, 21);
  _res(11, 21) = P(11, 21);
  _res(12, 21) = P(12, 21);
  _res(13, 21) = P(13, 21);
  _res(14, 21) = P(14, 21);
  _res(15, 21) = P(15, 21);
  _res(16, 21) = P(16, 21);
  _res(17, 21) = P(17, 21);
  _res(18, 21) = P(18, 21);
  _res(19, 21) = P(19, 21);
  _res(20, 21) = P(20, 21);
  _res(21, 21) = P(21, 21);
  _res(22, 21) = 0;
  _res(0, 22) = P(0, 22) * _tmp18 + P(10, 22) * _tmp23 + P(11, 22) * _tmp6 + P(9, 22) * _tmp15;
  _res(1, 22) = P(1, 22) * _tmp18 + P(10, 22) * _tmp30 + P(11, 22) * _tmp35 + P(9, 22) * _tmp37;
  _res(2, 22) = P(10, 22) * _tmp46 + P(11, 22) * _tmp45 + P(2, 22) * _tmp18 + P(9, 22) * _tmp48;
  _res(3, 22) = P(1, 22) * _tmp76 - P(12, 22) * _tmp58 - P(13, 22) * _tmp62 - P(14, 22) * _tmp65 +
                P(2, 22) * _tmp80 + P(3, 22);
  _res(4, 22) = P(0, 22) * _tmp118 - P(12, 22) * _tmp111 - P(13, 22) * _tmp103 -
                P(14, 22) * _tmp109 + P(2, 22) * _tmp106 + P(4, 22);
  _res(5, 22) = P(0, 22) * _tmp139 + P(1, 22) * _tmp134 - P(12, 22) * _tmp136 -
                P(13, 22) * _tmp135 - P(14, 22) * _tmp133 + P(5, 22);
  _res(6, 22) = P(3, 22) * dt + P(6, 22);
  _res(7, 22) = P(4, 22) * dt + P(7, 22);
  _res(8, 22) = P(5, 22) * dt + P(8, 22);
  _res(9, 22) = P(9, 22);
  _res(10, 22) = P(10, 22);
  _res(11, 22) = P(11, 22);
  _res(12, 22) = P(12, 22);
  _res(13, 22) = P(13, 22);
  _res(14, 22) = P(14, 22);
  _res(15, 22) = P(15, 22);
  _res(16, 22) = P(16, 22);
  _res(17, 22) = P(17, 22);
  _res(18, 22) = P(18, 22);
  _res(19, 22) = P(19, 22);
  _res(20, 22) = P(20, 22);
  _res(21, 22) = P(21, 22);
  _res(22, 22) = P(22, 22);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
