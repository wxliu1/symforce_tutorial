// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: gnss_psr_dopp_residual
 *
 * Args:
 *     Pi: Matrix31
 *     Vi: Matrix31
 *     Pj: Matrix31
 *     Vj: Matrix31
 *     rcv_dt: Scalar
 *     rcv_ddt: Scalar
 *     yaw_diff: Scalar
 *     ref_ecef: Matrix31
 *     ion_delay: Scalar
 *     tro_delay: Scalar
 *     ratio: Scalar
 *     tgd: Scalar
 *     sv_pos: Matrix31
 *     sv_vel: Matrix31
 *     svdt: Scalar
 *     svddt: Scalar
 *     freq: Scalar
 *     psr_measured: Scalar
 *     dopp_measured: Scalar
 *     pr_uura: Scalar
 *     dp_uura: Scalar
 *     pr_weight: Scalar
 *     dp_weight: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix21
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> GnssPsrDoppResidual(
    const Eigen::Matrix<Scalar, 3, 1>& Pi, const Eigen::Matrix<Scalar, 3, 1>& Vi,
    const Eigen::Matrix<Scalar, 3, 1>& Pj, const Eigen::Matrix<Scalar, 3, 1>& Vj,
    const Scalar rcv_dt, const Scalar rcv_ddt, const Scalar yaw_diff,
    const Eigen::Matrix<Scalar, 3, 1>& ref_ecef, const Scalar ion_delay, const Scalar tro_delay,
    const Scalar ratio, const Scalar tgd, const Eigen::Matrix<Scalar, 3, 1>& sv_pos,
    const Eigen::Matrix<Scalar, 3, 1>& sv_vel, const Scalar svdt, const Scalar svddt,
    const Scalar freq, const Scalar psr_measured, const Scalar dopp_measured, const Scalar pr_uura,
    const Scalar dp_uura, const Scalar pr_weight, const Scalar dp_weight, const Scalar epsilon) {
  // Total ops: 166

  // Unused inputs
  (void)pr_uura;
  (void)dp_uura;

  // Input arrays

  // Intermediate terms (38)
  const Scalar _tmp0 = Scalar(1.0) - ratio;
  const Scalar _tmp1 = Pi(2, 0) * ratio + Pj(2, 0) * _tmp0;
  const Scalar _tmp2 =
      Scalar(1.0) *
      std::atan2(ref_ecef(1, 0),
                 epsilon * ((((ref_ecef(0, 0)) > 0) - ((ref_ecef(0, 0)) < 0)) + Scalar(0.5)) +
                     ref_ecef(0, 0));
  const Scalar _tmp3 = std::cos(_tmp2);
  const Scalar _tmp4 =
      epsilon + std::pow(ref_ecef(0, 0), Scalar(2)) + std::pow(ref_ecef(1, 0), Scalar(2));
  const Scalar _tmp5 =
      (Scalar(1) / Scalar(259466641532452617353)) /
      (Scalar(0.99330562000986) * _tmp4 +
       (Scalar(1) / Scalar(40680631590769)) * std::pow(epsilon, Scalar(2)) +
       std::pow(ref_ecef(2, 0), Scalar(2)) *
           std::sqrt(Scalar(Scalar(0.99330562000986) * _tmp4 +
                            (Scalar(1) / Scalar(40680631590769)) * std::pow(epsilon, Scalar(2)) +
                            std::pow(ref_ecef(2, 0), Scalar(2)))));
  const Scalar _tmp6 =
      Scalar(1.0) * std::atan((Scalar(4.4917426690159599e+38) * _tmp5 *
                                   [&]() {
                                     const Scalar base = ref_ecef(2, 0);
                                     return base * base * base;
                                   }() /
                                   (epsilon + Scalar(40408299984661.5)) +
                               ref_ecef(2, 0)) /
                              (-Scalar(1.09675613733197e+25) * (_tmp4 * std::sqrt(_tmp4)) * _tmp5 +
                               std::sqrt(_tmp4) + epsilon));
  const Scalar _tmp7 = std::cos(_tmp6);
  const Scalar _tmp8 = _tmp3 * _tmp7;
  const Scalar _tmp9 = Pi(0, 0) * ratio + Pj(0, 0) * _tmp0;
  const Scalar _tmp10 = std::sin(_tmp6);
  const Scalar _tmp11 = std::sin(yaw_diff);
  const Scalar _tmp12 = _tmp11 * _tmp3;
  const Scalar _tmp13 = std::sin(_tmp2);
  const Scalar _tmp14 = std::cos(yaw_diff);
  const Scalar _tmp15 = _tmp13 * _tmp14;
  const Scalar _tmp16 = -_tmp10 * _tmp12 - _tmp15;
  const Scalar _tmp17 = Pi(1, 0) * ratio + Pj(1, 0) * _tmp0;
  const Scalar _tmp18 = _tmp14 * _tmp3;
  const Scalar _tmp19 = _tmp11 * _tmp13;
  const Scalar _tmp20 = -_tmp10 * _tmp18 + _tmp19;
  const Scalar _tmp21 = _tmp1 * _tmp8 + _tmp16 * _tmp9 + _tmp17 * _tmp20 + ref_ecef(0, 0);
  const Scalar _tmp22 = _tmp13 * _tmp7;
  const Scalar _tmp23 = -_tmp10 * _tmp19 + _tmp18;
  const Scalar _tmp24 = -_tmp10 * _tmp15 - _tmp12;
  const Scalar _tmp25 = _tmp1 * _tmp22 + _tmp17 * _tmp24 + _tmp23 * _tmp9 + ref_ecef(1, 0);
  const Scalar _tmp26 = -_tmp21 + sv_pos(0, 0);
  const Scalar _tmp27 = -_tmp25 + sv_pos(1, 0);
  const Scalar _tmp28 = _tmp14 * _tmp7;
  const Scalar _tmp29 = _tmp11 * _tmp7;
  const Scalar _tmp30 =
      -_tmp1 * _tmp10 - _tmp17 * _tmp28 - _tmp29 * _tmp9 - ref_ecef(2, 0) + sv_pos(2, 0);
  const Scalar _tmp31 = std::sqrt(Scalar(std::pow(_tmp26, Scalar(2)) + std::pow(_tmp27, Scalar(2)) +
                                         std::pow(_tmp30, Scalar(2)) + epsilon));
  const Scalar _tmp32 = Vi(2, 0) * ratio + Vj(2, 0) * _tmp0;
  const Scalar _tmp33 = Vi(0, 0) * ratio + Vj(0, 0) * _tmp0;
  const Scalar _tmp34 = Vi(1, 0) * ratio + Vj(1, 0) * _tmp0;
  const Scalar _tmp35 = _tmp16 * _tmp33 + _tmp20 * _tmp34 + _tmp32 * _tmp8;
  const Scalar _tmp36 = _tmp22 * _tmp32 + _tmp23 * _tmp33 + _tmp24 * _tmp34;
  const Scalar _tmp37 = Scalar(1.0) / (_tmp31);

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = pr_weight * (-Scalar(2.4323877909897198e-13) * _tmp21 * sv_pos(1, 0) +
                            Scalar(2.4323877909897198e-13) * _tmp25 * sv_pos(0, 0) + _tmp31 +
                            ion_delay - psr_measured + rcv_dt - Scalar(299792458.0) * svdt +
                            Scalar(299792458.0) * tgd + tro_delay);
  _res(1, 0) =
      dp_weight *
      (-Scalar(2.4323877909897299e-13) * _tmp21 * sv_vel(1, 0) +
       Scalar(2.4323877909897299e-13) * _tmp25 * sv_vel(0, 0) +
       _tmp26 * _tmp37 * (-_tmp35 + sv_vel(0, 0)) + _tmp27 * _tmp37 * (-_tmp36 + sv_vel(1, 0)) +
       _tmp30 * _tmp37 * (-_tmp10 * _tmp32 - _tmp28 * _tmp34 - _tmp29 * _tmp33 + sv_vel(2, 0)) -
       Scalar(2.4323877909897299e-13) * _tmp35 * sv_pos(1, 0) +
       Scalar(2.4323877909897299e-13) * _tmp36 * sv_pos(0, 0) +
       Scalar(299792458.0) * dopp_measured / freq + rcv_ddt - Scalar(299792458.0) * svddt);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
